Traceback (most recent call last):
  File "/Users/mol/micromamba/envs/moenv/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/mol/micromamba/envs/moenv/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/mol/micromamba/envs/moenv/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/mol/micromamba/envs/moenv/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Users/mol/micromamba/envs/moenv/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/mol/micromamba/envs/moenv/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/mol/micromamba/envs/moenv/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/mol/micromamba/envs/moenv/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import random
import numpy as np
from dwave.system import DWaveSampler, EmbeddingComposite
import dwave_networkx as dnx
import networkx as nx
import dimod


# Number of geolocations (nodes)
num_nodes = 6

# Function to generate random geolocations
def generate_geolocations(num_nodes):
    geolocations = [(random.uniform(0, 100), random.uniform(0, 100)) for _ in range(num_nodes)]
    return geolocations

# Function to calculate the Euclidean distance between two points
def euclidean_distance(p1, p2):
    return np.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

# Generate geolocations
geolocations = generate_geolocations(num_nodes)

# Create a complete graph with nodes representing geolocations
G = nx.complete_graph(num_nodes)

# Add edges with weights as the Euclidean distance between geolocations
for i, p1 in enumerate(geolocations):
    for j, p2 in enumerate(geolocations):
        if i != j:
            G.add_edge(i, j, weight=euclidean_distance(p1, p2))

# Set up the QUBO problem
lagrange = 1.0
qubo = dnx.traveling_salesperson_qubo(G, lagrange)

# Convert the QUBO to a BQM (Binary Quadratic Model)
bqm = dimod.BinaryQuadraticModel.from_qubo(qubo)

# Set up the sampler
sampler = EmbeddingComposite(DWaveSampler())

# Solve the TSP problem using D-Wave's quantum annealer
sampleset = sampler.sample(bqm)

# Find the shortest path from the sampleset
path = dnx.traveling_salesperson(G, sampleset)

print("Shortest path:", path)
print("Total distance:", sampleset.first.energy)

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[1], line 41[0m
[1;32m     38[0m bqm [38;5;241m=[39m dimod[38;5;241m.[39mBinaryQuadraticModel[38;5;241m.[39mfrom_qubo(qubo)
[1;32m     40[0m [38;5;66;03m# Set up the sampler[39;00m
[0;32m---> 41[0m sampler [38;5;241m=[39m EmbeddingComposite([43mDWaveSampler[49m[43m([49m[43m)[49m)
[1;32m     43[0m [38;5;66;03m# Solve the TSP problem using D-Wave's quantum annealer[39;00m
[1;32m     44[0m sampleset [38;5;241m=[39m sampler[38;5;241m.[39msample(bqm)

File [0;32m~/micromamba/envs/moenv/lib/python3.9/site-packages/dwave/system/samplers/dwave_sampler.py:184[0m, in [0;36mDWaveSampler.__init__[0;34m(self, failover, retry_interval, **config)[0m
[1;32m    181[0m [38;5;28mself[39m[38;5;241m.[39mretry_interval [38;5;241m=[39m retry_interval
[1;32m    182[0m [38;5;28mself[39m[38;5;241m.[39m_solver_penalty [38;5;241m=[39m defaultdict([38;5;28mint[39m)
[0;32m--> 184[0m [38;5;28mself[39m[38;5;241m.[39mclient [38;5;241m=[39m [43mClient[49m[38;5;241;43m.[39;49m[43mfrom_config[49m[43m([49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mconfig[49m[43m)[49m
[1;32m    185[0m [38;5;28mself[39m[38;5;241m.[39msolver [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_get_solver(penalty[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39m_solver_penalty)

File [0;32m~/micromamba/envs/moenv/lib/python3.9/site-packages/dwave/cloud/client/base.py:374[0m, in [0;36mClient.from_config[0;34m(cls, config_file, profile, client, **kwargs)[0m
[1;32m    371[0m _client [38;5;241m=[39m config[38;5;241m.[39mpop([38;5;124m'[39m[38;5;124mclient[39m[38;5;124m'[39m, [38;5;28;01mNone[39;00m) [38;5;129;01mor[39;00m [38;5;124m'[39m[38;5;124mbase[39m[38;5;124m'[39m
[1;32m    373[0m logger[38;5;241m.[39mdebug([38;5;124m"[39m[38;5;124mCreating [39m[38;5;132;01m%s[39;00m[38;5;124m.Client() with: [39m[38;5;132;01m%r[39;00m[38;5;124m"[39m, _client, config)
[0;32m--> 374[0m [38;5;28;01mreturn[39;00m [43m_clients[49m[43m[[49m[43m_client[49m[43m][49m[43m([49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mconfig[49m[43m)[49m

File [0;32m~/micromamba/envs/moenv/lib/python3.9/site-packages/dwave/cloud/events.py:105[0m, in [0;36mdispatches_events.__call__.<locals>.wrapped[0;34m(*pargs, **kwargs)[0m
[1;32m    103[0m dispatch_event([38;5;28mself[39m[38;5;241m.[39mbefore_eventname, obj[38;5;241m=[39mobj, args[38;5;241m=[39margs)
[1;32m    104[0m [38;5;28;01mtry[39;00m:
[0;32m--> 105[0m     rval [38;5;241m=[39m [43mfn[49m[43m([49m[38;5;241;43m*[39;49m[43mpargs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    106[0m [38;5;28;01mexcept[39;00m [38;5;167;01mException[39;00m [38;5;28;01mas[39;00m exc:
[1;32m    107[0m     dispatch_event([38;5;28mself[39m[38;5;241m.[39mafter_eventname, obj[38;5;241m=[39mobj, args[38;5;241m=[39margs, exception[38;5;241m=[39mexc)

File [0;32m~/micromamba/envs/moenv/lib/python3.9/site-packages/dwave/cloud/client/base.py:477[0m, in [0;36mClient.__init__[0;34m(self, *args, **kwargs)[0m
[1;32m    475[0m token [38;5;241m=[39m options[[38;5;124m'[39m[38;5;124mtoken[39m[38;5;124m'[39m]
[1;32m    476[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m token:
[0;32m--> 477[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([38;5;124m"[39m[38;5;124mAPI token not defined[39m[38;5;124m"[39m)
[1;32m    479[0m [38;5;66;03m# parse optional client certificate[39;00m
[1;32m    480[0m client_cert [38;5;241m=[39m options[[38;5;124m'[39m[38;5;124mclient_cert[39m[38;5;124m'[39m]

[0;31mValueError[0m: API token not defined
ValueError: API token not defined

